<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적폼(ajax, axios, fetch)</title>
    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      .result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적폼 전송 연습하기</h1>
    <form name="register">
      <label for="name">이름:</label>
      <input type="text" name="name" id="name" required />

      <br />
      <sapn>성별</sapn>
      <input type="radio" id="male" name="gender" value="남성" required />
      <label for="male">남자</label>

      <input type="radio" id="female" name="gender" value="여성" />
      <label for="female">여자</label>

      <br /><br />
      <button type="button" onclick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax POST 제출</button>

      <br />
      <button type="button" onclick="axiosGet()">axios GET 제출</button>
      <button type="button" onclick="axiosPost()">axios POST 제출</button>
      <br />
      <button type="button" onclick="fetchGet()">fetch GET 제출</button>
      <button type="button" onclick="fetchPost()">fetch POST 제출</button>
    </form>
    <div class="result"></div>
    <script>
      const resultBox = document.querySelector(".result");
      function ajaxGet() {
        const form = document.forms["register"]; // 폼 선택(form의 이름이 register)

        // console.log(form);
        // console.log(form.name);
        // console.log(form.gender);
        // console.log(form.gender.length); // 2
        // console.log(form.gender.value); // "", "여성", "남성"

        // button type button은 required 동작하지 않음
        // 유효성 검사 따로 해주기
        // if (form.name.value.trim() === "") {
        //   alert("이름을 입력해주세요!");
        //   return;
        // }

        // if (form.gender.value === "") {
        //   alert("성별을 선택해주세요!");
        //   return;
        // }

        // --- ajax 요청 ---
        // 보낼 데이터 객체 형태로 만들기
        const data = {
          name: form.name.value, // 입력한 이름
          gender: form.gender.value, // "여성", "남성"
        };

        /* ajax 사용 */
        $.ajax({
          type: "get", // 어떤 메소드로 보낼 건지? (get, post, delete, ...)
          url: "/ajax", // form의 action에 해당하는 곳
          data: data, // 서버로 넘겨줄 데이터

          // 통신이 성공했을 때
          success: function (res) {
            // 통신 이후에 일어날 일들
            console.log(res); // { name: '쇼', gender: '여성' } 이런 식으로 들어옴
            resultBox.textContent = `GET /ajax 요청 완료! ${res.name}의 성별은 ${res.gender}`;
          },

          // 통신이 실패했을 때
          error: function (e) {
            console.log("e", e);
          },
        });
      }
      function ajaxPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "post",
          url: "ajax",
          data: data, // 위에서 선언한 data // ajax 요청에서 보낼 데이터
          // 서버에 요청을 보낼 때 포함될 데이터 // 클라이언트가 서버로 보내는 정보
          // 사용자가 입력한 데이터를 서버로 보내기 위한 것

          success: function (data) {
            // data: data,와 success: function (data)의 data는 다른 것임
            // 서버에서 응답을 받았을 때 전달되는 데이터
            // 서버가 반환한 데이터
            console.log(data);
            resultBox.textContent = `POST /ajax 요청 완료! ${data.name}의 성별은 ${data.gender}`;
          },

          error: function (e) {
            console.log(e);
          },
        });
      }

      async function axiosGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // 유효성 검사 - checkValidity()
        // required가 있으면 기입이 되었는 지 안 되었는 지 검사 해줌
        /*
        - required 속성이 없는 항목 > 무조건 true 반환
        - required 속성이 있는 항목 >
         - 기입을 했다면 true 반환
         - 기입을 하지 않았다면 false 반환
        */

        console.log(form.name.checkValidity()); // input[name="name"]
        console.log(form.gender[0].checkValidity());

        if (!form.name.checkValidity()) {
          // resultBox.innerHTML = "이름을 입력해주세요!";
          resultBox.innerHTML = form.name.validationMessage; // 이 입력란을 작성하세요.
          return;
        }

        if (!form.gender[0].checkValidity()) {
          resultBox.innerHTML = form.gender[0].validationMessage; // 다음 옵션 중 하나를 선택하세요.
          return;
        }

        // --- axios 요청 보내기 ---
        // 1. then ~ catch 사용
        // axios({
        //   method: "get",
        //   url: "/axios",
        //   params: data, // get 요청일 때는 params에 담아서 요청(axios)
        // })
        //   .then(function (res) {
        //     // 통신에 성공했을 때
        //     // console.log(res);
        //     console.log("-------------");
        //     console.log(res.data); // 서버에서 준 데이터
        //     // console.log(res.status);
        //     // console.log(res.statusText);
        //     // console.log(res.headers);
        //     // console.log(res.config);
        //     resultBox.textContent = `GET /axios 요청 완료!
        //   ${res.data.name}의 성별은 ${res.data.gender}`;
        //     resultBox.style.color = "blue";
        //   })
        //   .catch(function (e) {
        //     // 통신에 실패했을 때
        //     console.error("error!!!"); // console.log가 아닌 onsole.error 사용 시 console창이 빨갛게 나옴!
        //     console.error(e);
        //   });

        // 2. async ~ await
        // 에러 처리를 try ~ catch 문을 사용해서 해주는 게 좋다!
        try {
          const res = await axios({
            method: "get",
            url: `/axios?name=${data.name}&gender=${data.gender}`,
          });
          console.log(res);
          console.log(res.data);
          const { name, gender } = res.data;
          resultBox.textContent = `${name}의 성별은 ${gender}`;
          resultBox.style.color = "blue";
          // console.log(res.headers);}
        } catch (e) {
          console.error(e);
        }
      }

      async function axiosPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await axios({
            method: "post",
            url: "/axios",
            data: data,
          });
          console.log(res);
          console.log("실제 데이터", res.data); // res.send("응답 완료");를 app.js에서 쓰면 실제 데이터 응답 완료가 나옴

          const { name: 이름, gender: 성별 } = res.data;
          resultBox.textContent = `POST /axios 요청 완료! ${이름}의 성별은 ${성별}`;
          resultBox.style.color = "hotpink";
        } catch (e) {
          console.error(e);
        }
      }

      function fetchGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // fetch('/fetch', {
        //   method:'get',
        // }) // fetch의 defalut method는 'GET'
        fetch(`/fetch?name=${data.name}&gender=${data.gender}`)
          .then((res) => {
            console.log(res);
            // 서버에서 넘어온 문자열을 뽑아내기 위해 text() 메소드 사용
            // text() : response 객체에서 텍스트 본문을 뽑아내기 위해 사용
            // return res.text();

            // json() : response 객체에서 오브젝트 본문을 뽑아내기 위해 사용
            return res.json();
          })
          .then((res) => {
            console.log(res);
            resultBox.textContent = `GET /fetch 요청 완료!! ${res.name}의 성별은 ${res.gender}`;
            resultBox.style.color = "purple";
          })
          .catch((e) => {
            console.error("e", e);
          });
      }

      async function fetchPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await fetch("/fetch", {
            method: "post",
            body: JSON.stringify(data), // JSON 형석으로 보내야 함(fetch)
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(res);

          // json(), text() >> 시간이 걸리는 작업
          const result = await res.json();
          console.log(result);
          const { name, gender } = result;
          resultBox.textContent = `POST /fetch 요청 결과 : ${name}의 성별은 ${gender}`;
          resultBox.style.color = "gray";
        } catch (e) {
          console.error(e);
        }
      }
    </script>
  </body>
</html>
